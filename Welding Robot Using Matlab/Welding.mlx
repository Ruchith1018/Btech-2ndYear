clear;
clc;
close all;

% Define the robot's links
L1 = Link('revolute', 'd', 0, 'a', 0, 'alpha', -pi/2);
L2 = Link('revolute', 'd', 0, 'a', 1000, 'alpha', 0);
L3 = Link('revolute', 'd', 0, 'a', 0, 'alpha', pi/2); 
L4 = Link('revolute', 'd', 1330, 'a', 0, 'alpha', -pi/2); 
L5 = Link('revolute', 'd', 0, 'a', 0, 'alpha', pi/2);
L6 = Link('revolute', 'd', 470, 'a', 0, 'alpha', 0);

% Create the robot
Robot = SerialLink([L1 L2 L3 L4 L5 L6], 'name', 'Welding Manipulator');
Robot.teach;

shape = 10;
while shape ~= 0
    clc;
    disp("Choose a shape that you would like to weld:");
    disp("1. 3-Lines in 3 planes");
    disp("2. Square");
    disp("3. Rectangle");
    disp("4. Triangle");
    disp("0. Exit, please :)");
    
    shape = input("Enter your choice: ");
    
    switch shape
        case 1
            % Define transformations for 3-Lines in 3 planes
            T = transl(2000, 0, 0) * rpy2tr(0, 90, 0, 'deg');
            T1 = transl(2000, -1500, 0) * rpy2tr(-164.6, 90, 163, 'deg');
            T2 = transl(1000, -1500, 0) * rpy2tr(-90, 90, 150, 'deg');
            T3 = transl(1000, -1500, 1000) * rpy2tr(-90, 90, 150, 'deg');
            
            T_in = ctraj(T, T1, 10);
            plot3([2000 2000], [0 -1500], [0 0], 'o-');
            hold on;
            plot3([2000 1000], [-1500 -1500], [0 0], 'o-');
            plot3([1000 1000], [-1500 -1500], [0 1000], 'o-');
            
            T_in1 = ctraj(T1, T2, 10);
            T_in2 = ctraj(T2, T3, 10);
            
            q = Robot.ikine(T_in);
            q1 = Robot.ikine(T_in1);
            q2 = Robot.ikine(T_in2);
            
            q_total = [q; q1; q2];
            Robot.teach(q_total);
            
        case 2
            % Define transformations for Square
            T = transl(2000, 0, 0) * rpy2tr(0, 90, 0, 'deg');
            T1 = transl(2000, -1000, 0) * rpy2tr(-164.6, 90, 163, 'deg');
            T2 = transl(2000, -1000, 1000) * rpy2tr(-164.6, 90, 163, 'deg');
            T3 = transl(2000, 0, 1000) * rpy2tr(-164.6, 90, 163, 'deg');
            
            plot3([2000 2000], [0 -1000], [0 0], 'o-');
            hold on;
            plot3([2000 2000], [-1000 -1000], [1000 0], 'o-');
            plot3([2000 2000], [-1000 0], [1000 1000], 'o-');
            plot3([2000 2000], [0 0], [1000 0], 'o-');
            
            T_in = ctraj(T, T1, 10);
            T_in1 = ctraj(T1, T2, 10);
            T_in2 = ctraj(T2, T3, 10);
            T_in3 = ctraj(T3, T, 10);
            
            q = Robot.ikine(T_in);
            q1 = Robot.ikine(T_in1);
            q2 = Robot.ikine(T_in2);
            q3 = Robot.ikine(T_in3);
            
            q_total = [q; q1; q2; q3];
            Robot.teach(q_total);
            
        case 3
            % Define transformations for Rectangle
            T = transl(2000, 0, 0) * rpy2tr(0, 90, 0, 'deg');
            T1 = transl(2000, -1500, 0) * rpy2tr(-164.6, 90, 163, 'deg');
            T2 = transl(2000, -1500, 500) * rpy2tr(-164.6, 90, 163, 'deg');
            T3 = transl(2000, 0, 500) * rpy2tr(-164.6, 90, 163, 'deg');
            
            plot3([2000 2000], [0 -1500], [0 0], 'o-');
            hold on;
            plot3([2000 2000], [-1500 -1500], [500 0], 'o-');
            plot3([2000 2000], [-1500 0], [500 500], 'o-');
            plot3([2000 2000], [0 0], [500 0], 'o-');
            
            T_in = ctraj(T, T1, 10);
            T_in1 = ctraj(T1, T2, 10);
            T_in2 = ctraj(T2, T3, 10);
            T_in3 = ctraj(T3, T, 10);
            
            q = Robot.ikine(T_in);
            q1 = Robot.ikine(T_in1);
            q2 = Robot.ikine(T_in2);
            q3 = Robot.ikine(T_in3);
            
            q_total = [q; q1; q2; q3];
            Robot.teach(q_total);
            
        case 4
            % Define transformations for Triangle
            T = transl(2000, 0, 0) * rpy2tr(0, 90, 0, 'deg');
            T1 = transl(2000, -1500, 0) * rpy2tr(-164.6, 90, 163, 'deg');
            T2 = transl(2000, -750, 500) * rpy2tr(-164.6, 90, 163, 'deg');
            
            plot3([2000 2000], [0 -1500], [0 0], 'o-');
            hold on;
            plot3([2000 2000], [-1500 -750], [0 500], 'o-');
            plot3([2000 2000], [-750 0], [500 0], 'o-');
            
            T_in = ctraj(T, T1, 10);
            T_in1 = ctraj(T1, T2, 10);
            T_in2 = ctraj(T2, T, 10);
            
            q = Robot.ikine(T_in);
            q1 = Robot.ikine(T_in1);
            q2 = Robot.ikine(T_in2);
            
            q_total = [q; q1; q2];
            Robot.teach(q_total);
            
        case 0
            return;
            
        otherwise
            disp('Invalid choice! Try again.');
            pause(0);
    end
end
